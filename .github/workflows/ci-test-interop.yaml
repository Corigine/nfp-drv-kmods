name: DKMS package interoperability tests

# ========== TRIGGER ==========
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true

jobs:
  install_dkms_package:
    name: Install DKMS package

    runs-on:
      - self-hosted
      - builder

    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:22.04
          - ubuntu:20.04
          - ubuntu:18.04
          - centos:8
          - centos:7
          - rockylinux:8.5
          - rockylinux:9.0
          - almalinux:8.5
          - almalinux:9.0

    container:
      image: ${{ matrix.distro }}
      volumes:
        - /mnt/cloud:/mnt/cloud
        - /mnt/local:/mnt/local

    steps:
      # --- INSTALL PRE-REQUISITES ---
      - name: Clean up the working directory
        run: rm -rf *

      - name: APT | Update cache and Git PPA
        if: "contains(matrix.distro, 'ubuntu')"
        run: |
          apt-get update
          apt-get install -y software-properties-common
          apt-get update
          add-apt-repository -y ppa:git-core/ppa
          apt-get update

      - name: APT | Install pre-requisite packages
        if: "contains(matrix.distro, 'ubuntu')"
        run: >-
          apt-get -o Dpkg::Options::="--force-confdef"
          -o Dpkg::Options::="--force-confold" -y install
          wget sudo dkms git
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: YUM | Add pre-requisite repositories
        if: matrix.distro == 'centos:7'
        # centos-release-scl required for GCC 8, endpoint-repo required for git
        run: |
          yum install -y epel-release
          yum install -y centos-release-scl
          yum install -y https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm

      - name: YUM | Remove existing git packages
        if: matrix.distro == 'centos:7'
        run: yum remove -y git git-*

      - name: YUM | Add pre-requisites packages
        if: matrix.distro == 'centos:7'
        run: |
          yum install -y epel-release
          yum install -y wget sudo dkms git

      - name: CentOS 8 | Add pre-requisite repositories and plugins
        if: matrix.distro == 'centos:8'
        run: |
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*
          dnf clean all

      - name: DNF | Install pre-requisite packages
        if: >-
          ${{ contains(matrix.distro, 'centos:8') ||
          contains(matrix.distro, 'rockylinux') ||
          contains(matrix.distro, 'almalinux') }}
        run: |
          dnf install -y epel-release
          dnf install -y wget sudo dkms git

      # --- CLONE REPOSITORIES ---
      - name: Checkout nfp driver kmods repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add nfp-drv-kmods-private to git safe directory list
        run: git config --global --add safe.directory `pwd`

      - name: Clone ci-libs (for other GH actions)
        uses: actions/checkout@v3
        with:
          repository: Corigine/ci-libs
          token: ${{ secrets.GHUB_TOKEN }}
          path: ci-libs

      - name: Install azcopy binary
        run: |
          wget https://aka.ms/downloadazcopy-v10-linux -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/
          sudo cp /tmp/azcopy_linux_amd64_*/azcopy /usr/bin/

      # --- COLLECT INFO AND DOWNLOAD PACKAGE ---
      - name: Collect package information
        id: describe
        shell: bash
        run: |-2
          case "$DISTRO" in
            "ubuntu"*)
              BINARY_TYPE="deb"
              ;;
            "centos"* | "rockylinux"* | "almalinux"*)
              BINARY_TYPE="rpm"
              ;;
            *)
              BINARY_TYPE="unknown"
              ;;
          esac

          PACKAGE_NAME=$(.github/scripts/describe-head.sh --pkg_name)
          PACKAGE_VERSION=$(.github/scripts/describe-head.sh --pkg_ver)

          echo "::set-output name=pkg_name::${PACKAGE_NAME}"
          echo "::set-output name=pkg_version::${PACKAGE_VERSION}"
          echo "::set-output name=binary_type::${BINARY_TYPE}"

          # DEFAULT_BRANCH defaults to public-main, but can be used to denote
          # other long-running branches for separate interim releases
          echo "::set-output name=default_branch::$DEFAULT_BRANCH"

          # If the default branch is not 'public-main', append the branch name,
          # without 'wip-', to the upload destination
          if [ ! "$DEFAULT_BRANCH" = "public-main" ]; then
            DST_SUFFIX=".${DEFAULT_BRANCH#wip-}"
          fi
          case $GITHUB_REF in
            "refs/heads/release-"*)
              AZURE_PATH="binaries/nfp-drv-dkms/releases${DST_SUFFIX}"
              ;;
            "refs/heads/prerelease-"*)
              AZURE_PATH="binaries/nfp-drv-dkms/prereleases${DST_SUFFIX}"
              ;;
            "refs/heads/${DEFAULT_BRANCH}")
              AZURE_PATH="binaries/nfp-drv-dkms/interim${DST_SUFFIX}/${PACKAGE_NAME}"
              ;;
            *)
              AZURE_PATH="tmp/nfp_drv_dkms_builds${DST_SUFFIX}"
              ;;
          esac

          echo "::set-output name=azure_dest::$(echo "${AZURE_PATH}/${BINARY_TYPE}")"
        env:
          DISTRO: ${{ matrix.distro }}
          DEFAULT_BRANCH: public-main

      - name: Find package name from Azure
        uses: ./ci-libs/github_actions/azure/azcopy_list
        id: artifact
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ steps.describe.outputs.azure_dest }}
          pattern: "${{ steps.describe.outputs.pkg_version }}"

      - name: Download DKMS Package from Azure storage
        uses: ./ci-libs/github_actions/azure/azcopy_download_sync
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: "${{ steps.describe.outputs.azure_dest }}/${{ steps.artifact.outputs.latest }}"
          dst: "./${{ steps.describe.outputs.pkg_name }}.${{ steps.describe.outputs.binary_type }}"

      # --- INSTALL DKMS PACKAGE ---
      - name: APT | Install DKMS package
        if: "contains(matrix.distro, 'ubuntu')"
        run: dpkg -i ${DKMS_PACKAGE}
        env:
          DKMS_PACKAGE: "${{ steps.describe.outputs.pkg_name }}.deb"

      - name: YUM | Install DKMS package
        if: matrix.distro == 'centos:7'
        run: yum -y install ${DKMS_PACKAGE}
        env:
          DKMS_PACKAGE: "${{ steps.describe.outputs.pkg_name }}.rpm"

      - name: DNF | Install DKMS package
        if: >-
          ${{ contains(matrix.distro, 'centos:8') ||
          contains(matrix.distro, 'rockylinux') ||
          contains(matrix.distro, 'almalinux') }}
        run: dnf -y install ${DKMS_PACKAGE}
        env:
          DKMS_PACKAGE: "${{ steps.describe.outputs.pkg_name }}.rpm"
