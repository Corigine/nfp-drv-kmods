name: Create Distro packages
run-name: >-
  Package-DKMS: ${{ github.head_ref || github.ref_name }}

# ========== TRIGGER ==========
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    outputs:
      deb_name:
        description: "Name of the resulting deb package."
        value: ${{ jobs.build_distro_package.outputs.deb_name }}
      rpm_name:
        description: "Name of the resulting rpm package."
        value: ${{ jobs.build_distro_package.outputs.rpm_name }}
      tgz_name:
        description: "Name of the resulting tarball."
        value: ${{ jobs.build_distro_package.outputs.tgz_name }}

jobs:
  build_distro_package:
    name: Build Distro package

    runs-on:
      - self-hosted
      - builder

    outputs:
      deb_name: ${{ steps.build_dest.outputs.deb_name }}
      rpm_name: ${{ steps.build_dest.outputs.rpm_name }}
      tgz_name: ${{ steps.build_dest.outputs.tgz_name }}

    strategy:
      fail-fast: false
      matrix:
        distro: [
            { "container": "ubuntu:20.04", "bin_type": "deb" },
            { "container": "rockylinux:8.5", "bin_type": "rpm" },
            { "container": "rockylinux:8.5", "bin_type": "tgz" },
          ]

    container:
      image: ${{ matrix.distro.container }}
      volumes:
        - /mnt/cloud:/mnt/cloud
        - /mnt/local:/mnt/local
      options: "--entrypoint /bin/bash"

    steps:
      # --- INSTALL PRE-REQUISITES ---
      - name: APT | Update cache
        if: matrix.distro.container == 'ubuntu:20.04'
        run:  |
          apt-get update -y
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:git-core/ppa
          apt-get update -y

      - name: APT | Install pre-requisite packages
        if: matrix.distro.container == 'ubuntu:20.04'
        run: >-
          apt-get -o Dpkg::Options::="--force-confdef"
          -o Dpkg::Options::="--force-confold" -y install
          git wget sudo gcc make automake dkms build-essential fakeroot devscripts debhelper findutils
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: DNF | Install epel
        if: matrix.distro.container == 'rockylinux:8.5'
        run: dnf install -y epel-release

      - name: DNF | Install pre-requisite packages | rpm
        if: matrix.distro.container == 'rockylinux:8.5' && matrix.distro.bin_type == 'rpm'
        run: >-
          dnf install -y --enablerepo=powertools
          git wget sudo gcc make automake dkms rpm-build findutils

      - name: DNF | Install pre-requisite packages | tgz
        if: matrix.distro.container == 'rockylinux:8.5' && matrix.distro.bin_type == 'tgz'
        run: >-
          dnf install -y git wget sudo findutils

      - name: Clean up the working directory
        run: find -delete

      # --- CLONE REPOSITORIES ---
      - name: Checkout nfp-driver-kmods-repo
        uses: Corigine/ci-libs/github_actions/utilities/checkout_corigine@main
        with:
          token: ${{ secrets.GHUB_TOKEN }}
          fetch-depth: 0

      - name: Install azcopy binary
        run: |
          wget https://aka.ms/downloadazcopy-v10-linux -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/
          sudo cp /tmp/azcopy_linux_amd64_*/azcopy /usr/bin/

      # --- COLLECT BUILD INFORMATION ---
      - name: Collect metadata
        id: describe
        run: |-2
          BINARY_TYPE=${{ matrix.distro.bin_type }}
          PACKAGE_NAME=$(.github/scripts/describe-head.sh --pkg_name)

          echo "pkg_name=${PACKAGE_NAME}" | tee -a $GITHUB_OUTPUT
          echo "binary_type=${BINARY_TYPE}" | tee -a $GITHUB_OUTPUT

          # DEFAULT_BRANCH defaults to public-main, but can be used to denote
          # other long-running branches for separate interim releases
          DEFAULT_BRANCH=$(bash .github/scripts/describe-head.sh --default_branch)
          echo "default_branch=${DEFAULT_BRANCH}" | tee -a $GITHUB_OUTPUT
        env:
          DISTRO: ${{ matrix.distro.container }}
          HEAD_REF: ${{ github.head_ref || github.ref_name }}

      # --- BUILD DKMS PACKAGE ---
      - name: Ubuntu | Build DEB DKMS package
        if: matrix.distro.bin_type == 'deb'
        run: sudo -E .github/scripts/create-packages.sh -t d
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}
          HEAD_REF: ${{ github.head_ref || github.ref_name }}

      - name: CentOS | Build RPM DKMS package
        if: matrix.distro.bin_type == 'rpm'
        run: sudo -E .github/scripts/create-packages.sh -t r
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}
          HEAD_REF: ${{ github.head_ref || github.ref_name }}

      - name: CentOS | Build TAR package
        if: matrix.distro.bin_type == 'tgz'
        run: sudo -E .github/scripts/create-packages.sh -t t
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}
          HEAD_REF: ${{ github.head_ref || github.ref_name }}

      - name: Prepare environment for upload
        id: build_dest
        shell: bash
        run: |
          DATE="$(date -u +%Y.%m.%d)"

          temp_dir=$(pwd)
          cd ${BIN_TYPE}/${BIN_PKG_NAME}
          FINAL_PKG_NAME=$(ls ${BIN_PKG_NAME}*.${BIN_TYPE})
          cd $temp_dir

          echo "${BIN_TYPE}/${BIN_PKG_NAME}/${FINAL_PKG_NAME}"
          echo "${BIN_PKG_NAME}"

          # Determine the target folder for releases and pre-releases
          TARGET_FOLDER=${HEAD_REF#*release-}
          TARGET_FOLDER=${TARGET_FOLDER:0:5}

          # If the default branch is not 'public-main', append the branch name,
          # without 'wip-', to the upload destination.
          # If the default branch is a customer branch (*-main), append
          # customer name to directory.
          case ${DEFAULT_BRANCH} in
            "public-main")
              readonly DST_SUFFIX=""
              ;;
            "wip-"*)
              readonly DST_SUFFIX=".${DEFAULT_BRANCH#wip-}"
              ;;
            *"-main")
              # Customer branch
              readonly DST_SUFFIX=".${DEFAULT_BRANCH%-main}"
              ;;
            *)
              readonly DST_SUFFIX=""
              ;;
          esac
          case $HEAD_REF in
            release-[0-9][0-9].[0-9][0-9].[0-9]|\
            ${DEFAULT_BRANCH%-main}-release-[0-9][0-9].[0-9][0-9].[0-9])
              # Release tag
              AZURE_PATH="binaries/nfp-drv-dkms/releases${DST_SUFFIX}/${TARGET_FOLDER}"
              ;;
            prerelease-[0-9][0-9].[0-9][0-9].[0-9]-rc[0-9]|\
            ${DEFAULT_BRANCH%-main}-prerelease-[0-9][0-9].[0-9][0-9].[0-9]-rc[0-9])
              # Prerelease tag
              AZURE_PATH="binaries/nfp-drv-dkms/prereleases${DST_SUFFIX}/${TARGET_FOLDER}"
              ;;
            ${DEFAULT_BRANCH})
              AZURE_PATH="binaries/nfp-drv-dkms/interim${DST_SUFFIX}/${BIN_PKG_NAME}"
              ;;
            *)
              AZURE_PATH="tmp/nfp_drv_dkms_builds${DST_SUFFIX}"
              AZURE_PATH="$AZURE_PATH/${{ github.actor }}/${DATE}"
              ;;
          esac

          AZURE_DEST=$(echo "${AZURE_PATH}/${BIN_TYPE}")
          echo "${{ matrix.distro.bin_type }}_name=$(echo "${FINAL_PKG_NAME}")" | tee -a $GITHUB_OUTPUT
          echo "dkms_bin_path=$(echo "${BIN_TYPE}/${BIN_PKG_NAME}/${FINAL_PKG_NAME}")" | tee -a $GITHUB_OUTPUT
          echo "azure_dest=${AZURE_DEST}" | tee -a $GITHUB_OUTPUT
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}
          BIN_TYPE: '${{ steps.describe.outputs.binary_type }}'
          BIN_PKG_NAME: '${{ steps.describe.outputs.pkg_name }}'
          HEAD_REF: ${{ github.head_ref || github.ref_name }}

      # --- UPLOAD DKMS PACKAGE TO AZURE ---
      - name: Upload to DKMS Package to Azure storage
        uses: Corigine/ci-libs/github_actions/azure/azcopy_upload_sync@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: '${{ steps.build_dest.outputs.dkms_bin_path }}'
          dst: '${{steps.build_dest.outputs.azure_dest}}'

      - name: Clean up afterwards
        if: always()
        run: find -delete
