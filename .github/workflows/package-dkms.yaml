name: Package DKMS

# ========== TRIGGER ==========
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true

jobs:
  build_dkms_package:
    name: Build DKMS package

    runs-on:
      - self-hosted
      - builder

    strategy:
      fail-fast: false
      matrix:
        distro:
          - ubuntu:20.04
          - rockylinux:8.5

    container:
      image: ${{ matrix.distro }}
      volumes:
        - /mnt/cloud:/mnt/cloud
        - /mnt/local:/mnt/local

    steps:
      # --- INSTALL PRE-REQUISITES ---
      - name: Clean up the working directory
        run: rm -rf *

      - name: APT | Update cache
        if: matrix.distro == 'ubuntu:20.04'
        run: apt-get update

      - name: APT | Install pre-requisite packages
        if: matrix.distro == 'ubuntu:20.04'
        run: >-
          apt-get -o Dpkg::Options::="--force-confdef"
          -o Dpkg::Options::="--force-confold" -y install
          git wget sudo gcc make automake dkms build-essential fakeroot devscripts debhelper
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: DNF | Install epel
        if: matrix.distro == 'rockylinux:8.5'
        run: dnf install -y epel-release

      - name: DNF | Install pre-requisite packages
        if: matrix.distro == 'rockylinux:8.5'
        run: >-
          dnf install -y --enablerepo=powertools
          git wget sudo gcc make automake dkms rpm-build

      # --- CLONE REPOSITORIES ---
      - name: Checkout nfp driver kmods repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Add nfp-drv-kmods-private to git safe directory list
        run: git config --global --add safe.directory `pwd`

      - name: Clone ci-libs (for other GH actions)
        uses: actions/checkout@v3
        with:
          repository: Corigine/ci-libs
          token: ${{ secrets.GHUB_TOKEN }}
          path: ci-libs

      - name: Install azcopy binary
        run: |
          wget https://aka.ms/downloadazcopy-v10-linux -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/
          sudo cp /tmp/azcopy_linux_amd64_*/azcopy /usr/bin/

      # --- COLLECT BUILD INFORMATION ---
      - name: Collect metadata
        id: describe
        run: |-2
          case "$DISTRO" in
            'ubuntu:20.04')
              BINARY_TYPE="deb"
              ;;
            'rockylinux:8.5')
              BINARY_TYPE="rpm"
              ;;
            *)
              BINARY_TYPE="unknown"
              ;;
          esac

          PACKAGE_NAME=$(.github/scripts/describe-head.sh --pkg_name)

          echo "::set-output name=pkg_name::${PACKAGE_NAME}"
          echo "::set-output name=binary_type::${BINARY_TYPE}"

          # DEFAULT_BRANCH defaults to public-main, but can be used to denote
          # other long-running branches for separate interim releases
          echo "::set-output name=default_branch::$DEFAULT_BRANCH"
        env:
          DISTRO: ${{ matrix.distro }}
          DEFAULT_BRANCH: public-main

      # --- BUILD DKMS PACKAGE ---
      - name: Ubuntu | Build DEB DKMS package
        if: matrix.distro == 'ubuntu:20.04'
        run: sudo -E .github/scripts/package-dkms.sh -t d
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}

      - name: CentOS | Build RPM DKMS package
        if: matrix.distro == 'rockylinux:8.5'
        run: sudo -E .github/scripts/package-dkms.sh -t r
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}

      - name: Prepare environment for upload
        id: build_dest
        run: |
          temp_dir=$(pwd)
          cd ${BIN_TYPE}/${BIN_PKG_NAME}
          DKMS_PKG_NAME=$(ls ${BIN_PKG_NAME}-dkms*.${BIN_TYPE})
          cd $temp_dir

          echo "${BIN_TYPE}/${BIN_PKG_NAME}/${DKMS_PKG_NAME}"
          echo "${BIN_PKG_NAME}"

          # If the default branch is not 'public-main', append the branch name,
          # without 'wip-', to the upload destination
          if [ ! "$DEFAULT_BRANCH" = "public-main" ]; then
            DST_SUFFIX=".${DEFAULT_BRANCH#wip-}"
          fi
          case $GITHUB_REF in
            "refs/heads/release-"*)
              AZURE_PATH="binaries/nfp-drv-dkms/releases${DST_SUFFIX}"
              ;;
            "refs/heads/prerelease-"*)
              AZURE_PATH="binaries/nfp-drv-dkms/prereleases${DST_SUFFIX}"
              ;;
            "refs/heads/${DEFAULT_BRANCH}")
              AZURE_PATH="binaries/nfp-drv-dkms/interim${DST_SUFFIX}/${BIN_PKG_NAME}"
              ;;
            *)
              AZURE_PATH="tmp/nfp_drv_dkms_builds${DST_SUFFIX}"
              ;;
          esac

          AZURE_DEST=$(echo "${AZURE_PATH}/${BIN_TYPE}")
          echo "::set-output name=dkms_bin_path::$(echo "${BIN_TYPE}/${BIN_PKG_NAME}/${DKMS_PKG_NAME}")"
          echo "::set-output name=azure_dest::${AZURE_DEST}"
        env:
          DEFAULT_BRANCH: ${{steps.describe.outputs.default_branch}}
          BIN_TYPE: '${{ steps.describe.outputs.binary_type }}'
          BIN_PKG_NAME: '${{ steps.describe.outputs.pkg_name }}'

      # --- UPLOAD DKMS PACKAGE TO AZURE ---
      - name: Upload to DKMS Package to Azure storage
        uses: ./ci-libs/github_actions/azure/azcopy_upload_sync
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: '${{ steps.build_dest.outputs.dkms_bin_path }}'
          dst: '${{steps.build_dest.outputs.azure_dest}}'
