name: Build c4c local

# ========== TRIGGER ==========

on:
  push:
    branches:
      - 'public-main'   # default branch name
      - '*-build*'      # Temporary build, no testing
      - '*build-*'      # Temporary build, no testing
      - 'prerelease-*'  # Prerelease build
      - 'release-*'     # Release build
      - '*.check'
    paths:
      - 'Makefile'
      - 'src/**'
      - '.github/workflows/build-local.yaml'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'Makefile'
      - 'src/**'
      - '.github/workflows/build-local.yaml'
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
  workflow_dispatch:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    inputs:
      whitelist:
        type: string
        required: false
        default: .*
        description: >-
          Whitelist of operating systems to build against, supplied in
          the form of a regular expression. (e.g. ".*anolis.*")
  workflow_call:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    inputs:
      whitelist:
        type: string
        required: false
        default: .*
        description: >-
          Whitelist of operating systems to build against, supplied in
          the form of a regular expression. (e.g. ".*anolis.*")

env:
  DOWNLOAD: ".download"
  UNPACKED: ".unpacked"

jobs:
  prepare:
    name: Prepare build matrix
    runs-on:
      - self-hosted
      - ci-linter-vm
    outputs:
      releases: ${{ steps.matrix.outputs.releases }}
    env:
      BASE_DIR: binaries/misc/kernel-devel-c4c
    steps:
      - name: Clean old artifacts
        run: |
          sudo find -delete

      - name: Check out repository
        uses: Corigine/ci-libs/github_actions/utilities/checkout_corigine@main
        with:
          token: ${{ secrets.GHUB_TOKEN }}

      - name: Determine list of accepted distros using repo kernel-devel metadata
        id: compat
        shell: bash
        run: |
          accepted="$(find .github/data/kernel-devel-c4c -type f -name buildinfo.json \
                      -exec sh -c "echo {} | awk -F'/' '{print \$(NF-1)}'" \; | xargs)"

          echo "ACCEPTED_OS=${accepted}" | tee -a $GITHUB_OUTPUT

      - name: Get local kernel-devel metadata
        uses: Corigine/ci-libs/github_actions/azure/azcopy_download@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.BASE_DIR }}/*
          dst: ${{ env.DOWNLOAD }}
          pattern: "*buildinfo.json"

      - name: Create build matrix
        id: matrix
        shell: python3 {0}
        working-directory: ${{ env.DOWNLOAD }}
        run: |
          import os
          import re
          import json

          if "${{ github.event_name }}" == "workflow_dispatch":
            whitelist = "${{ inputs.whitelist }}"
          else:
            whitelist = ".*"

          accepted_os = "${{ steps.compat.outputs.ACCEPTED_OS }}".split()

          releases = []
          directories = [d for d in sorted(os.listdir()) if
                         (os.path.isdir(d) and re.search(whitelist, d))]
          for directory in directories:
            if directory in accepted_os:
              with open(f"{directory}/buildinfo.json") as buildinfo:
                release = json.load(buildinfo)
                release["directory"] = f"${{ env.BASE_DIR }}/{directory}"

                releases.append(release)
            else:
              print(f"::notice::{directory} is not supported for this version of the o-o-t driver")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            github_output.write(f"releases={releases}")

  build-c4c-misc:
    name: 'Build-C4C-MISC: ${{matrix.release.name}}'
    needs: prepare
    runs-on:
      - self-hosted
      - builder
    timeout-minutes: 90
    env:
      KVER: "*"
    strategy:
      fail-fast: false
      matrix:
        release: ${{ fromJSON(needs.prepare.outputs.releases) }}
    container:
      image: ${{ matrix.release.container }}
    steps:
      - name: Check for pre-requisite packages
        id: provision_check
        shell: bash
        run: |
          declare -A dependencies=( ["yum"]="ca-certificates cpio \
                                             elfutils-libelf-devel findutils \
                                             gcc git236 gzip hostname make \
                                             sudo tar wget which" \
                                    ["dnf"]="ca-certificates cpio \
                                             elfutils-libelf-devel findutils \
                                             gcc git gzip hostname make sed \
                                             sudo tar wget" \
                                    ["zypper"]="gawk bc bison ca-certificates \
                                                cpio findutils flex gcc git \
                                                gzip hostname libelf-devel \
                                                libelf1 libopenssl-devel make \
                                                python3 sed sudo tar wget \
                                                which" )

          if [[ "${{ matrix.release.name }}" == "AnolisOS/7.9" ]]; then
            package_manager="yum"
            installed_packages="$(yum list installed | sed 1d | awk -F'\.' '{print $1}')"
          elif [[ "${{ matrix.release.name }}" == "openSUSE"* ]]; then
            package_manager="zypper"
            installed_packages="$(zypper search -i | awk '{if ($1 == "i" || $1 == "i+") {print $3}}')"
          else
            package_manager="dnf"
            installed_packages="$(dnf list --installed | sed 1d | awk -F'\.' '{print $1}')"
          fi

          if [[ "${{ matrix.release.name }}" == "openEuler"* || \
                "${{ matrix.release.name }}" == "KylinOS"* ]]; then
            new_dependencies="$( echo "${dependencies[$package_manager]}" | \
                                 sed 's/elfutils-libelf-devel/elfutils-devel/' )"
            dependencies[$package_manager]="$new_dependencies"
          fi

          prerequisites="${dependencies[$package_manager]}"
          provision="false"
          for package in $prerequisites; do
            if ! $(echo "$installed_packages" | grep -w -q "$package"); then
              missing_deps=$missing_deps$package" "
              provision="true"
            fi
          done

          echo "missing_deps=$missing_deps" | tee -a $GITHUB_OUTPUT
          echo "provision=$provision" | tee -a $GITHUB_OUTPUT

      - name: Update OpenEuler mirror
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          startsWith(matrix.release.name, 'openEuler')
        run: |
          if [[ ! -f /etc/yum.repos.d/openEuler.repo ]]; then
            echo "[base]" >> /etc/yum.repos.d/openEuler.repo
            echo "name=base" >> /etc/yum.repos.d/openEuler.repo
            echo "baseurl=http://repo.openeuler.org/${{ matrix.release.name }}/OS/x86_64/" \
                 >> /etc/yum.repos.d/openEuler.repo
            echo "enabled=1" >> /etc/yum.repos.d/openEuler.repo
            echo "gpgcheck=1" >> /etc/yum.repos.d/openEuler.repo
            echo "gpgkey=http://repo.openeuler.org/${{ matrix.release.name }}/OS/x86_64/RPM-GPG-KEY-openEuler"\
                 >> /etc/yum.repos.d/openEuler.repo
          fi

          sed -i 's|repo.openeuler.org|mirrors.dotsrc.org/openeuler|g' /etc/yum.repos.d/openEuler.repo

      - name: Install pre-requisite packages | YUM
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          matrix.release.name == 'AnolisOS/7.9'
        run: |
          yum install -y https://repo.ius.io/ius-release-el7.rpm \
                      https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum install -y ${{ steps.provision_check.outputs.missing_deps }}

      - name: Install pre-requisite packages | DNF
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          matrix.release.name != 'AnolisOS/7.9' &&
          !contains(matrix.release.name, 'openSUSE')
        run: |
          dnf clean all
          dnf distro-sync -y
          if [[ "${{ matrix.release.name }}" != "OpenCloudOS/9.0" && \
                "${{ matrix.release.name }}" != "KylinOS/V10"* && \
                "${{ matrix.release.name }}" != "openEuler"* ]]; then
            dnf install -y epel-release
          fi
          dnf install -y ${{ steps.provision_check.outputs.missing_deps }}
          dnf reinstall -y crypto-policies

      - name: Install pre-requisite packages | Zypper
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          contains(matrix.release.name, 'openSUSE')
        run: |
          if ! zypper lr repo-oss >/dev/null 2>&1; then
            zypper ar -f http://download.opensuse.org/distribution/openSUSE-stable/repo/oss repo-oss
          fi
          zypper --gpg-auto-import-keys ref
          zypper -n in ${{ steps.provision_check.outputs.missing_deps }}

      - name: Clean old artifacts
        run: |
          sudo find -delete

      - name: Check out repository
        uses: Corigine/ci-libs/github_actions/utilities/checkout_corigine@main
        with:
          token: ${{ secrets.GHUB_TOKEN }}

      - name: Install azcopy binary
        if: >-
          steps.provision_check.outputs.provision == 'true'
        run: |
          binary_link=https://aka.ms/downloadazcopy-v10-linux

          wget $binary_link -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/ --strip-components=1
          sudo cp /tmp/azcopy /usr/bin/

      - name: Get local kernel-devel packages
        uses: Corigine/ci-libs/github_actions/azure/azcopy_download@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ matrix.release.directory }}
          dst: ${{ env.DOWNLOAD }}
          pattern: "*.rpm"

      - name: Unpack Kernel Headers
        uses: ./.github/actions/unpack-rpm
        with:
            input-path: ${{ env.DOWNLOAD }}
            output-path: ${{ env.UNPACKED }}

      - name: Set build environment variables | openSUSE
        if: contains(matrix.release.name, 'openSUSE')
        working-directory: ${{ env.UNPACKED }}/usr/src
        shell: bash
        run: |
          mkdir -p kernels
          VERSIONS=$(ls ./ | grep "linux-.*[0-9]$")

          for SOURCE in $VERSIONS; do
            find $(pwd)/$SOURCE-obj/x86_64/default/ -maxdepth 1 -mindepth 1 -not -name Makefile \
              -exec cp -r {} $(pwd)/$SOURCE/ \;

            mv $(pwd)/$SOURCE/ $(pwd)/kernels/$SOURCE
          done

      - name: Build
        uses: ./.github/actions/build
        with:
            search-path: "${{ env.UNPACKED }}/usr/src/kernels"
            redirect-stderr: ${{ contains(matrix.release.name, 'openSUSE') && 'false' || 'true' }}
