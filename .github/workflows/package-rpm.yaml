name: Package RPM
run-name: >-
  ${{ format( 'driver: {0} OS: {1}',
             inputs.driver, inputs.target_distro)
  }}

on:
  workflow_dispatch:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    inputs:
      driver_build_type:
        type: choice
        required: false
        options:
          - tmp
          - interim
          - prereleases
          - releases
        default: releases
        description: >-
          Where the O-O-T driver tarball is located.
      driver:
        type: string
        required: false
        description: >-
          Full filename of the nfp O-O-T driver tarball to package
          to RPM. Leave blank to use the latest available
      driver_upload_location:
        type: choice
        required: false
        options:
          - tmp
          - default
        default: default
        description: >-
          Where the O-O-T driver RPM will be uploaded to. The default here
          being the same location (broadly speaking), as where the original
          O-O-T driver tarball was found.
      kdev_base_url:
        type: string
        required: false
        default: >-
          http://mirror.centos.org/centos/8-stream/BaseOS/x86_64/os/Packages/
        description: >-
          Base URL for desired kernel-devel to be used in building
          RPM files.
      target_distro:
        type: choice
        required: false
        options:
          - centos:8
          - dokken/centos-stream-9:main
          - rockylinux:8.5
          - rockylinux:9
          - openanolis/anolisos:8.6
          - openanolis/anolisos:8.8
          - opencloudos/opencloudos:8.6
          - opencloudos/opencloudos:8.8
          - opencloudos/opencloudos:9.0
          - lhrbest/kylinos:v10_sp3
          - nfschinadocker/nfschina-server:v4.0
          - openeuler/openeuler:20.03
          - openeuler/openeuler:22.03
        default: centos:8
        description: >-
          Target distro on which the driver .rpm will be built.
      target_arch:
        type: choice
        required: false
        options:
          - x86_64
          - aarch64
        default: x86_64
        description: >-
          Target architecture on which the driver .rpm will be built.

jobs:
  prepare:
    name: 'Prepare'
    runs-on:
      - self-hosted
      - ci-linter-vm
    outputs:
      target_distro: ${{ steps.distro.outputs.distro }}
    steps:
      - name: Metadata | Print user inputs
        if: github.event_name == 'workflow_dispatch'
        shell: python3 {0}
        run: |
          import json
          inputs ={
                    "driver_build_type" : "${{ inputs.driver_build_type }}",
                    "driver" : "${{ inputs.driver }}",
                    "driver_upload_location" : "${{ inputs.driver_upload_location }}",
                    "kdev_base_url" : "${{ inputs.kdev_base_url }}",
                    "target_distro" : "${{ inputs.target_distro }}",
                    "target_arch" : "${{ inputs.target_arch }}"
                    }
          print(json.dumps(inputs, indent=1))

      - name: Format target distro
        id: distro
        shell: python3 {0}
        run: |
          import sys
          import os as operating_sys
          target_distro = "${{ inputs.target_distro }}"

          distro, version = target_distro.split(':')

          if "${{ inputs.target_arch }}" == "aarch64":
            if distro == "opencloudos/opencloudos":
              distro += "_aarch64"
            elif distro == "lhrbest/kylinos":
              version = version.replace("_","")
              version += "_arm64"
            elif distro == "nfschinadocker/nfschina-server":
              print("::error::Specified target_distro does not support aarch64 architecture")
              sys.exit(1)

          target_distro = distro + ":" + version
          with open(operating_sys.environ['GITHUB_OUTPUT'], 'a') as github_output:
            github_output.write(f"distro={target_distro}")

  package_rpm:
    name: 'Package RPM: ${{ inputs.driver }}'
    needs: prepare
    runs-on:
      - self-hosted
      - ${{ inputs.target_arch == 'aarch64' && 'builder-arm' || 'builder' }}
    container:
      image: ${{ needs.prepare.outputs.target_distro }}
      volumes:
        - /mnt/cloud:/mnt/cloud
        - /mnt/local:/mnt/local
      options: "--entrypoint /bin/bash"
    steps:
      - name: Add pre-requisite repositories and plugins
        if: inputs.target_distro == 'centos:8'
        run: |
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*

      - name: Install pre-requisite packages | DNF
        if: inputs.target_distro != 'openanolis/anolisos:7.9-x86_64'
        run: |
          dnf clean all
          dnf distro-sync -y
          if [[ "${{ inputs.target_distro }}" != "opencloudos/opencloudos:9.0" && \
                "${{ inputs.target_distro }}" != *"kylinos"* && \
                "${{ inputs.target_distro }}" != *"openeuler"* && \
                "${{ inputs.target_distro }}" != *"nfschina-server"* ]]; then
            dnf install -y epel-release
          fi
          dnf install -y wget sudo git sed \
            gcc make rpm-build elfutils-libelf-devel

      - name: Clean old artifacts
        run: |
          sudo find -delete

      - name: Check out repository
        uses: Corigine/ci-libs/github_actions/utilities/checkout_corigine@main
        with:
          token: ${{ secrets.GHUB_TOKEN }}

      - name: Prepare environment variables
        shell: bash
        run: |
          if [[ '${{ inputs.driver_build_type }}' == 'tmp' ]]; then
            BASE_DIR=tmp/nfp_drv_dkms_builds/
          else
            BASE_DIR=binaries/nfp-drv-dkms/${{ inputs.driver_build_type }}/
          fi
          echo "BASE_DIR=$BASE_DIR" | tee -a $GITHUB_ENV

          DOWNLOAD=$(pwd)/.download/
          echo "DOWNLOAD=$DOWNLOAD" | tee -a $GITHUB_ENV
          mkdir -p $DOWNLOAD
          UNPACKED=$(pwd)/.unpacked/
          echo "UNPACKED=$UNPACKED" | tee -a $GITHUB_ENV
          mkdir -p $UNPACKED

          KERNEL_DEVEL=${{ inputs.kdev_base_url }}
          echo "KERNEL_DEVEL=$KERNEL_DEVEL" | tee -a $GITHUB_ENV

      - name: Install azcopy binary
        run: |
          if [[ '${{ inputs.target_arch }}' == 'aarch64' ]]; then
            binary_link=https://aka.ms/downloadazcopy-v10-linux-arm64
          else
            binary_link=https://aka.ms/downloadazcopy-v10-linux
          fi

          wget $binary_link -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/ --strip-components=1
          sudo cp /tmp/azcopy /usr/bin/

      - name: Find driver tarball
        uses: Corigine/ci-libs/github_actions/azure/azcopy_list@main
        id: artifact_driver
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.BASE_DIR }}
          pattern: ".*${{ inputs.driver == '' && 'agilio-nfp-driver.*.tgz' || inputs.driver }}"

      - name: Download driver tarball
        uses: Corigine/ci-libs/github_actions/azure/azcopy_download@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.BASE_DIR }}/${{ steps.artifact_driver.outputs.latest-ver }}
          dst: ${{ env.DOWNLOAD }}/

      - name: Extract driver tarball
        shell: bash
        run: |
          DRIVER_TAR=${{ steps.artifact_driver.outputs.latest-ver }}
          DRIVER_TAR=${DRIVER_TAR##*/}
          DRIVER_VER=${DRIVER_TAR%.tgz}
          RPM_TAR=${DRIVER_VER%-*}

          tar xvfz ${{ env.DOWNLOAD }}/$DRIVER_TAR -C ${{ env.UNPACKED }}

          echo "DRIVER_TAR=$DRIVER_TAR" | tee -a $GITHUB_ENV
          echo "DRIVER_VER=$DRIVER_VER" | tee -a $GITHUB_ENV
          echo "RPM_TAR=$RPM_TAR.tgz" | tee -a $GITHUB_ENV

      - name: Download Kernel Header Packages
        uses: ./.github/actions/download
        with:
          output-path: ${{ env.DOWNLOAD }}
          url: ${{ env.KERNEL_DEVEL }}
          accept: "kernel-devel-*.rpm"

      - name: Unpack Kernel Headers
        uses: ./.github/actions/unpack-rpm
        with:
          input-path: ${{ env.DOWNLOAD }}
          output-path: ${{ env.UNPACKED }}

      - name: Build RPM packages
        shell: bash
        run: |
          for HEADERS in $(ls ${{ env.UNPACKED }}/usr/src/kernels/); do
            rpmbuild \
              -D "%kernel_path ${{ env.UNPACKED }}/usr/src/kernels/$HEADERS/" \
              -D "_topdir $(pwd)/rpmbuild" \
              -tb ${{ env.UNPACKED }}/${{ env.DRIVER_VER }}/${{ env.RPM_TAR }}
          done

          RPM_DIR=$(pwd)/rpmbuild/RPMS/${{ inputs.target_arch }}/
          echo "RPM_DIR=${RPM_DIR}/*" | tee -a $GITHUB_ENV

      - name: Prepare environment for upload
        shell: bash
        run: |
          DATE="$(date -u +%Y.%m.%d)"

          TARGET_DISTRO=${{ inputs.target_distro }}
          if [[ $TARGET_DISTRO == "dokken/centos-stream-9:main" ]]; then
            TARGET_DISTRO="centos-9"
          else
            TARGET_DISTRO=${TARGET_DISTRO#*/}
            TARGET_DISTRO=$(echo $TARGET_DISTRO | tr : -)
          fi

          if [[ '${{ inputs.driver_upload_location }}' == 'tmp' || \
                '${{ inputs.driver_build_type }}' == 'tmp' ]]; then
            AZURE_PATH=tmp/nfp_drv_dkms_builds/${{ github.actor }}/$DATE/rpm/$TARGET_DISTRO
          else
            RELEASE_VER_MAJOR=$(echo ${{ env.RPM_TAR }} | \
              sed 's/agilio-nfp-driver-\([0-9]\{2\}\.[0-9]\{2\}\).*/\1/' )
            AZURE_PATH=${{ env.BASE_DIR }}/$RELEASE_VER_MAJOR/rpm/$TARGET_DISTRO
          fi
          echo "AZURE_PATH=$AZURE_PATH" | tee -a $GITHUB_ENV

      - name: Upload RPM packages
        uses: Corigine/ci-libs/github_actions/azure/azcopy_upload_sync@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.RPM_DIR }}
          dst: ${{ env.AZURE_PATH }}
