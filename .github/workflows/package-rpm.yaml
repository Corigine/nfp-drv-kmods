name: Package RPM
run-name: >-
  ${{ format( 'driver: {0}/{1} OS: {2}', inputs.driver_build_type,
             inputs.driver == '' && 'latest' || inputs.driver,
             inputs.target_distro)
  }}

on:
  workflow_call:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    inputs:
      driver_build_type:
        type: string
        required: false
        default: releases
        description: |
          Which subdirectory the O-O-T driver tarball is located.
          Possible options are:
            - tmp
            - interim
            - prereleases
            - releases
      customer:
        type: string
        required: false
        default: ""
        description: |
          The driver may be a specific version requested by a customer,
          and as such, stored in a separate location. Leave blank if no
          customer.
          Possible options are:
            - comba
            - customer
            - opencloud
            - zte
      driver:
        type: string
        required: false
        description: >-
          Full filename of the nfp O-O-T driver tarball to package
          to RPM. Leave blank to use the latest available
      driver_upload_location:
        type: string
        required: false
        default: default
        description: >-
          Where the O-O-T driver RPM will be uploaded to. The default here
          being the same location (broadly speaking), as where the original
          O-O-T driver tarball was found.
      kdev_base_url:
        type: string
        required: false
        description: >-
          Base URL for desired kernel-devel to be used in building
          RPM files. Leave blank to use the default for the targetted
          OS/Arch.
      target_distro:
        type: string
        required: false
        default: centos:8
        description: >-
          Target distro on which the driver .rpm will be built.
      target_arch:
        type: string
        required: false
        default: x86_64
        description: >-
          Target architecture on which the driver .rpm will be built.
  workflow_dispatch:
    secrets:
      GHUB_TOKEN:
        required: true
      AZ_SAS_TOK:
        required: true
    inputs:
      driver_build_type:
        type: choice
        required: false
        options:
          - tmp
          - interim
          - prereleases
          - releases
        default: releases
        description: >-
          Where the O-O-T driver tarball is located.
      customer:
        type: choice
        required: false
        options:
          - ""
          - comba
          - customer
          - opencloud
          - zte
        default: ""
        description: |
          The driver may be a specific version requested by a customer,
          and as such, stored in a separate location. Leave blank if no
          customer.
      driver:
        type: string
        required: false
        description: >-
          Full filename of the nfp O-O-T driver tarball to package
          to RPM. Leave blank to use the latest available
      driver_upload_location:
        type: choice
        required: false
        options:
          - tmp
          - default
        default: default
        description: >-
          Where the O-O-T driver RPM will be uploaded to. The default here
          being the same location (broadly speaking), as where the original
          O-O-T driver tarball was found.
      kdev_base_url:
        type: string
        required: false
        description: >-
          Base URL for desired kernel-devel to be used in building
          RPM files. Leave blank to use the default for the targetted
          OS/Arch.
      target_distro:
        type: choice
        required: false
        options:
          - centos:7
          - centos:8
          - dokken/centos-stream-9:main
          - rockylinux:8.5
          - rockylinux:9
          - openanolis/anolisos:7.9
          - openanolis/anolisos:8.6
          - openanolis/anolisos:8.8
          - opencloudos/opencloudos:8.6
          - opencloudos/opencloudos:8.8
          - opencloudos/opencloudos:9.0
          - lhrbest/kylinos:v10sp1
          - lhrbest/kylinos:v10sp2
          - lhrbest/kylinos:v10sp3
          - lhrbest/kylinos:v10sp3-2403
          - nfschinadocker/nfschina-server:v4.0
          - openeuler/openeuler:20.03
          - openeuler/openeuler:22.03
          - bclinux/bclinux:8
          - bclinux/bclinux:8.1
          - bclinux/bclinux:8.2
          - opensuse/opensuse12.4
          - opensuse/opensuse12.5
          - opensuse/opensuse15.1
          - opensuse/opensuse15.2
          - opensuse/opensuse15.3
          - opensuse/opensuse15.4
          - opensuse/opensuse15.5
          - uos/uos:1050
          - uos/uos:1050u1
          - uos/uos:1050u2
          - uos/uos:1060
          - uos/uos:1070
          - all
        default: centos:8
        description: >-
          Target distro on which the driver .rpm will be built.
      target_arch:
        type: choice
        required: false
        options:
          - x86_64
          - aarch64
          - all
        default: x86_64
        description: >-
          Target architecture on which the driver .rpm will be built.

jobs:
  prepare:
    name: 'Prepare'
    runs-on:
      - self-hosted
      - ci-linter-vm
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Metadata | Print user inputs
        shell: python3 {0}
        run: |
          import json
          inputs ={
                    "driver_build_type" : "${{ inputs.driver_build_type }}",
                    "driver" : "${{ inputs.driver }}",
                    "driver_upload_location" : "${{ inputs.driver_upload_location }}",
                    "kdev_base_url" : "${{ inputs.kdev_base_url }}",
                    "target_distro" : "${{ inputs.target_distro }}",
                    "target_arch" : "${{ inputs.target_arch }}"
                    }
          print(json.dumps(inputs, indent=1))

      - name: Prepare build matrix
        id: matrix
        shell: python3 {0}
        run: |
          import re
          import sys
          import os as operating_sys

          repositories = {
                          "centos:7": {
                             "x86_64": {
                                "container": "centos:7",
                                "mirrors": [
                                   "http://mirror.centos.org/centos/7/os/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "centos:7",
                                "mirrors": [
                                   "http://mirror.centos.org/altarch/7/os/aarch64/Packages"
                                ]
                             }
                          },
                          "centos:8": {
                             "x86_64": {
                                "container": "centos:8",
                                "mirrors": [
                                   "https://vault.centos.org/8-stream/BaseOS/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "centos:8",
                                "mirrors": [
                                   "https://vault.centos.org/8-stream/BaseOS/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "dokken/centos-stream-9:main": {
                             "x86_64": {
                                "container": "dokken/centos-stream-9:main",
                                "mirrors": [
                                   "https://mirror.stream.centos.org/9-stream/AppStream/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "dokken/centos-stream-9:main",
                                "mirrors": [
                                   "https://mirror.stream.centos.org/9-stream/AppStream/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "rockylinux:8.5": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "https://download.rockylinux.org/pub/rocky/8/BaseOS/x86_64/os/Packages/k/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-rocky8",
                                "mirrors": [
                                   "https://download.rockylinux.org/pub/rocky/8/BaseOS/aarch64/os/Packages/k/"
                                ]
                             }
                          },
                          "rockylinux:9": {
                             "x86_64": {
                                "container": "rockylinux:9",
                                "mirrors": [
                                   "https://download.rockylinux.org/pub/rocky/9/AppStream/x86_64/os/Packages/k/"
                                ]
                             },
                             "aarch64": {
                                "container": "rockylinux:9",
                                "mirrors": [
                                   "https://download.rockylinux.org/pub/rocky/9/AppStream/aarch64/os/Packages/k/"
                                ]
                             }
                          },
                          "openanolis/anolisos:7.9": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-anolisos7.9",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/7.9/os/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-anolisos7.9",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/7.9/os/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "openanolis/anolisos:8.6": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-anolisos8.6",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/8.6/BaseOS/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-anolisos8.6",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/8.6/BaseOS/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "openanolis/anolisos:8.8": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-anolisos8.8",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/8.8/BaseOS/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-anolisos8.8",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.openanolis.cn/anolis/8.8/BaseOS/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "opencloudos/opencloudos:8.6": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opencloudos8.6",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/8.6/BaseOS/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-opencloudos8.6",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/8.6/BaseOS/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "opencloudos/opencloudos:8.8": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opencloudos8.8",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/8.8/BaseOS/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-opencloudos8.8",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/8.8/BaseOS/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "opencloudos/opencloudos:9.0": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opencloudos9.0",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/9.0/AppStream/x86_64/os/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-opencloudos9.0",
                                "mirrors": [
                                   "local",
                                   "https://mirrors.opencloudos.org/opencloudos/9.0/AppStream/aarch64/os/Packages/"
                                ]
                             }
                          },
                          "lhrbest/kylinos:v10sp1": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-kylinosv10sp1",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP1/os/adv/lic/base/x86_64/Packages/"
                                ]
                             },
                             # Currently unable to run any dnf commands due to certificate issues with the default
                             # repository for this container
                             # "aarch64": {
                             #    "container": "lhrbest/kylinos:v10sp1_arm64",
                             #    "mirrors": [
                             #       "https://update.cs2c.com.cn/NS/V10/V10SP1/os/adv/lic/base/aarch64/Packages/"
                             #    ]
                             # }
                          },
                          "lhrbest/kylinos:v10sp2": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-kylinosv10sp2",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP2/os/adv/lic/base/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-kylinosv10sp2",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP2/os/adv/lic/base/aarch64/Packages/"
                                ]
                             }
                          },
                          "lhrbest/kylinos:v10sp3": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-kylinosv10sp3",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/base/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-kylinosv10sp3",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP3/os/adv/lic/base/aarch64/Packages/"
                                ]
                             }
                          },
                          "lhrbest/kylinos:v10sp3-2403": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-kylinosv10sp3",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP3-2403/os/adv/lic/base/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-kylinosv10sp3",
                                "mirrors": [
                                   "local",
                                   "https://update.cs2c.com.cn/NS/V10/V10SP3-2403/os/adv/lic/base/aarch64/Packages/"
                                ]
                             }
                          },
                          "nfschinadocker/nfschina-server:v4.0": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-nfschina-serverv4.0",
                                "mirrors": [
                                   "local",
                                   "https://updates.os.nfschina.com/NFS4.0/GenOS/RPMS/Releases/Packages/"
                                ]
                             }
                          },
                          "openeuler/openeuler:20.03": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-openeuler20.03-lts",
                                "mirrors": [
                                   "local",
                                   "http://mirrors.dotsrc.org/openeuler/openEuler-20.03-LTS/OS/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-openeuler20.03-lts",
                                "mirrors": [
                                   "local",
                                   "http://mirrors.dotsrc.org/openeuler/openEuler-20.03-LTS/OS/aarch64/Packages/"
                                ]
                             }
                          },
                          "openeuler/openeuler:22.03": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-openeuler22.03-lts",
                                "mirrors": [
                                   "local",
                                   "http://mirrors.dotsrc.org/openeuler/openEuler-22.03-LTS/OS/x86_64/Packages/"
                                ]
                             },
                             "aarch64": {
                                "container": "ci-docker-registry-vm:5000/drv-aarch64-openeuler22.03-lts",
                                "mirrors": [
                                   "local",
                                   "http://mirrors.dotsrc.org/openeuler/openEuler-22.03-LTS/OS/aarch64/Packages/"
                                ]
                             }
                          },
                          "bclinux/bclinux:8": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "bclinux/bclinux:8.1": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "bclinux/bclinux:8.2": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "opensuse/opensuse:12.4": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse12.4",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently there is no container image for sles12sp4 on the arm platform
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse12.4",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:12.5": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse12.5",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse12.5",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:15.1": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse15.1",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse15.1",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:15.2": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse15.2",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse15.2",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:15.3": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse15.3",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse15.3",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:15.4": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse15.4",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse15.4",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "opensuse/opensuse:15.5": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-opensuse15.5",
                                "mirrors": [
                                   "local"
                                ]
                             },
                             # Currently we have no kernel header packages for OpenSUSE on ARM architectures
                             # "aarch64": {
                             #    "container": "ci-docker-registry-vm:5000/drv-aarch64-opensuse15.5",
                             #    "mirrors": [
                             #       "local"
                             #    ]
                             # }
                          },
                          "uos/uos:1050": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "uos/uos:1050u1": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "uos/uos:1050u2": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "uos/uos:1060": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          },
                          "uos/uos:1070": {
                             "x86_64": {
                                "container": "ci-docker-registry-vm:5000/drv-x86-64-rocky8",
                                "mirrors": [
                                   "local"
                                ]
                             }
                          }
                        }

          releases = []
          if "${{ inputs.target_distro }}" == "all":
            distros = list(repositories.keys())
          else:
            distros = ["${{ inputs.target_distro }}"]

          if "${{ inputs.target_arch }}" == "all":
            architectures = ["x86_64", "aarch64"]
          else:
            architectures = ["${{ inputs.target_arch }}"]

          for arch in architectures:
            for target_distro in distros:
              distro, version = target_distro.split(':')

              if distro == "dokken/centos-stream-9":
                upload_dir = "centos-9"
              else:
                upload_dir = re.sub(r'^[^/]*/', '', distro) + "-" + version

              if "openeuler" in distro:
                upload_dir += "-lts"

              if arch == "aarch64" and "aarch64" not in repositories[target_distro]:
                print(f"::notice::aarch64 architecture is not supported for {target_distro}")
                continue

              if "${{ inputs.kdev_base_url }}" == "":
                mirror = repositories[target_distro][arch]["mirrors"][0]
              else:
                mirror = "${{ inputs.kdev_base_url }}"

              target_distro = distro + ":" + version

              release = {
                          "container": repositories[target_distro][arch]["container"],
                          "mirror": mirror,
                          "arch": arch,
                          "upload_dir": upload_dir
                        }

              releases.append(release)

          with open(operating_sys.environ['GITHUB_OUTPUT'], 'a') as github_output:
            github_output.write(f"matrix={releases}")

  package_rpm:
    name: '${{ matrix.release.upload_dir }} - ${{ matrix.release.arch }}'
    needs: prepare
    runs-on:
      - self-hosted
      - ${{ matrix.release.arch == 'aarch64' && 'builder-arm' || 'builder' }}
    container:
      image: ${{ matrix.release.container }}
      volumes:
        - /mnt/cloud:/mnt/cloud
        - /mnt/local:/mnt/local
      options: "--entrypoint /bin/bash"
    strategy:
      fail-fast: false
      matrix:
        release: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - name: Check for pre-requisite packages
        id: provision_check
        shell: bash
        run: |
          if [[ "${{ matrix.release.arch }}" == "x86_64" ]]; then
            GIT=git236
          else
            GIT=git
          fi
          declare -A dependencies=( ["yum"]="ca-certificates cpio \
                                             elfutils-libelf-devel findutils ${GIT} \
                                             gcc gzip hostname make rpm-build \
                                             rpmdevtools sudo tar wget which" \
                                    ["dnf"]="ca-certificates cpio \
                                             elfutils-libelf-devel findutils \
                                             gcc git gzip hostname make
                                             rpm-build rpmdevtools sed sudo \
                                             tar wget" \
                                    ["zypper"]="gawk bc bison ca-certificates \
                                                cpio findutils flex gcc git \
                                                gzip hostname libelf-devel \
                                                libelf1 libopenssl-devel make \
                                                python3 rpm-build sed sudo \
                                                tar wget which" )

          if [[ "${{ matrix.release.upload_dir }}" == "anolisos-7.9" || \
                "${{ matrix.release.upload_dir }}" == "centos-7" ]]; then
            package_manager="yum"
            installed_packages="$(yum list installed | sed 1d | awk -F'\.' '{print $1}')"
          elif [[ "${{ matrix.release.upload_dir }}" == "opensuse"* ]]; then
            package_manager="zypper"
            installed_packages="$(zypper search -i | awk '{if ($1 == "i" || $1 == "i+") {print $3}}')"
          else
            package_manager="dnf"
            installed_packages="$(dnf list --installed | sed 1d | awk -F'\.' '{print $1}')"
          fi

          if [[ "${{ matrix.release.upload_dir }}" == "openeuler"* || \
                "${{ matrix.release.upload_dir }}" == "kylinos"* ]]; then
            new_dependencies="$( echo "${dependencies[${package_manager}]}" | \
                                 sed 's/elfutils-libelf-devel/elfutils-devel/' )"
            dependencies[${package_manager}]="${new_dependencies}"
          fi

          prerequisites="${dependencies[${package_manager}]}"
          provision="false"
          for package in ${prerequisites}; do
            if ! $(echo "${installed_packages}" | grep -w -q "${package}"); then
              missing_deps=${missing_deps}${package}" "
              provision="true"
            fi
          done

          if azcopy --version >/dev/null 2>&1; then
            azcopy_present="true"
          else
            azcopy_present="false"
          fi

          echo "missing_deps=${missing_deps}" | tee -a $GITHUB_OUTPUT
          echo "provision=${provision}" | tee -a $GITHUB_OUTPUT
          echo "azcopy_present=${azcopy_present}" | tee -a $GITHUB_OUTPUT

      - name: Add pre-requisite repositories and plugins | CentOS-8
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          matrix.release.upload_dir == 'centos-8'
        run: |
          sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
          sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*

      - name: Update OpenEuler mirror | OpenEuler
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          startsWith(matrix.release.upload_dir, 'openeuler')
        run: |
          version=$(echo "${ matrix.release.upload_dir }" | cut -d "-" -f2)
          if [[ ! -f /etc/yum.repos.d/openEuler.repo ]]; then
            echo "[base]" >> /etc/yum.repos.d/openEuler.repo
            echo "name=base" >> /etc/yum.repos.d/openEuler.repo
            echo "baseurl=http://repo.openeuler.org/openEuler-$version-LTS/OS/${{ matrix.release.arch }}/" \
                 >> /etc/yum.repos.d/openEuler.repo
            echo "enabled=1" >> /etc/yum.repos.d/openEuler.repo
            echo "gpgcheck=1" >> /etc/yum.repos.d/openEuler.repo
            echo "gpgkey=http://repo.openeuler.org/openEuler-$version-LTS/OS/${{ matrix.release.arch }}/RPM-GPG-KEY-openEuler"\
                 >> /etc/yum.repos.d/openEuler.repo
          fi

          sed -i 's|repo.openeuler.org|mirrors.dotsrc.org/openeuler|g' /etc/yum.repos.d/openEuler.repo

      - name: Install pre-requisite packages | YUM
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          (matrix.release.upload_dir == 'anolisos-7.9' ||
           matrix.release.upload_dir == 'centos-7')
        run: |
          if [[ "${{ matrix.release.arch }}" == "x86_64" ]]; then
            if ! yum list installed | grep -q ius-release-el7; then
              yum install -y https://repo.ius.io/ius-release-el7.rpm
            fi
            if ! yum list installed | grep -q ius-release-el7; then
              yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            fi
          fi

          yum install -y sudo ${{ steps.provision_check.outputs.missing_deps }}

      - name: Install pre-requisite packages | DNF
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          (matrix.release.upload_dir != 'anolisos-7.9' &&
           matrix.release.upload_dir != 'centos-7' &&
           !startsWith(matrix.release.upload_dir, 'opensuse'))
        run: |
          dnf clean all
          if [[ "${{ matrix.release.upload_dir }}" != *"nfschina-server"* ]]; then
            dnf distro-sync -y
          fi
          if [[ "${{ matrix.release.upload_dir }}" != "opencloudos-9.0" && \
                "${{ matrix.release.upload_dir }}" != *"kylinos"* && \
                "${{ matrix.release.upload_dir }}" != *"openeuler"* && \
                "${{ matrix.release.upload_dir }}" != *"nfschina-server"* ]]; then
            dnf install -y epel-release
          fi
          dnf install -y ${{ steps.provision_check.outputs.missing_deps }}
          dnf reinstall -y crypto-policies

      - name: Install pre-requisite packages | Zypper
        if: >-
          steps.provision_check.outputs.provision == 'true' &&
          startsWith(matrix.release.upload_dir, 'opensuse')
        run: |
          if ! zypper lr repo-oss >/dev/null 2>&1; then
            zypper ar -f http://download.opensuse.org/distribution/openSUSE-stable/repo/oss repo-oss
          fi
          zypper --gpg-auto-import-keys ref
          zypper -n in ${{ steps.provision_check.outputs.missing_deps }}

      - name: Clean old artifacts
        run: |
          sudo find -delete

      - name: Check out repository | Corigine
        if: >-
          matrix.release.arch == 'x86_64' ||
          ( matrix.release.upload_dir != 'anolisos-7.9' &&
            matrix.release.upload_dir != 'centos-7' )
        uses: Corigine/ci-libs/github_actions/utilities/checkout_corigine@main
        with:
          token: ${{ secrets.GHUB_TOKEN }}

      - name: Check out repository
        if: >-
          matrix.release.arch == 'aarch64' &&
          ( matrix.release.upload_dir == 'anolisos-7.9' ||
            matrix.release.upload_dir == 'centos-7' )
        uses: actions/checkout@v2

      - name: Prepare environment variables
        shell: bash
        run: |
          if [[ '${{ inputs.driver_build_type }}' == 'tmp' ]]; then
            BASE_DIR=tmp/nfp_drv_dkms_builds
          else
            BASE_DIR=binaries/nfp-drv-dkms/${{ inputs.driver_build_type }}
            if [[ "${{ inputs.customer }}" != "" ]]; then
              BASE_DIR="${BASE_DIR}.${{ inputs.customer }}"
            fi
          fi
          echo "BASE_DIR=${BASE_DIR}" | tee -a $GITHUB_ENV

          DOWNLOAD=$(pwd)/.download/
          echo "DOWNLOAD=${DOWNLOAD}" | tee -a $GITHUB_ENV
          mkdir -p ${DOWNLOAD}
          UNPACKED=$(pwd)/.unpacked/
          echo "UNPACKED=${UNPACKED}" | tee -a $GITHUB_ENV
          mkdir -p ${UNPACKED}

      - name: Install azcopy binary
        if: >-
          steps.provision_check.outputs.azcopy_present == 'false'
        run: |
          if [[ '${{ matrix.release.arch }}' == 'aarch64' ]]; then
            binary_link=https://azcopyvnext.azureedge.net/releases/release-10.24.0-20240326/azcopy_linux_arm64_10.24.0.tar.gz
          else
            binary_link=https://azcopyvnext.azureedge.net/releases/release-10.24.0-20240326/azcopy_linux_amd64_10.24.0.tar.gz
          fi

          wget ${binary_link} -O /tmp/downloadazcopy-v10-linux.tgz
          tar -xvf /tmp/downloadazcopy-v10-linux.tgz -C /tmp/ --strip-components=1
          sudo cp /tmp/azcopy /usr/bin/

      - name: Find driver tarball
        uses: Corigine/ci-libs/github_actions/azure/azcopy_list@main
        id: artifact_driver
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.BASE_DIR }}
          pattern: ".*${{ inputs.driver == '' && 'agilio-nfp-driver.*.tgz' || inputs.driver }}"

      - name: Download driver tarball
        uses: Corigine/ci-libs/github_actions/azure/azcopy_download@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.BASE_DIR }}/${{ steps.artifact_driver.outputs.latest-ver }}
          dst: ${{ env.DOWNLOAD }}/
          force_download: "${{ github.event_name != 'workflow_dispatch' }}"

      - name: Extract driver tarball
        shell: bash
        run: |
          DRIVER_TAR=${{ steps.artifact_driver.outputs.latest-ver }}
          DRIVER_TAR=${DRIVER_TAR##*/}
          DRIVER_VER=${DRIVER_TAR%.tgz}
          RPM_TAR=${DRIVER_VER%-*}

          tar xvfz ${{ env.DOWNLOAD }}/${DRIVER_TAR} -C ${{ env.UNPACKED }}

          echo "DRIVER_TAR=${DRIVER_TAR}" | tee -a $GITHUB_ENV
          echo "DRIVER_VER=${DRIVER_VER}" | tee -a $GITHUB_ENV
          echo "RPM_TAR=${RPM_TAR}.tgz" | tee -a $GITHUB_ENV

      - name: Download Kernel Header Packages | Mirror
        if: matrix.release.mirror != 'local'
        uses: ./.github/actions/download
        with:
          output-path: ${{ env.DOWNLOAD }}
          url: ${{ matrix.release.mirror }}
          accept: "kernel-devel-*.rpm"

      - name: Download Kernel Header Packages | Local
        if: matrix.release.mirror == 'local'
        uses: Corigine/ci-libs/github_actions/azure/azcopy_download@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: binaries/misc/kernel-devel-c4c/${{ matrix.release.arch }}/${{ matrix.release.upload_dir }}/
          pattern: "*.rpm"
          dst: ${{ env.DOWNLOAD }}/

      - name: Unpack Kernel Headers
        uses: ./.github/actions/unpack-rpm
        with:
          input-path: ${{ env.DOWNLOAD }}
          output-path: ${{ env.UNPACKED }}

      - name: Set build environment variables | openSUSE
        if: startsWith(matrix.release.upload_dir, 'opensuse')
        working-directory: ${{ env.UNPACKED }}/usr/src
        shell: bash
        run: |
          mkdir -p kernels
          VERSIONS=$(ls ./ | grep "linux-.*[0-9]$")

          for SOURCE in ${VERSIONS}; do
            find $(pwd)/${SOURCE}-obj/x86_64/default/ -maxdepth 1 -mindepth 1 -not -name Makefile \
              -exec cp -r {} $(pwd)/${SOURCE}/ \;

            mv $(pwd)/${SOURCE}/ $(pwd)/kernels/${SOURCE}
          done

      - name: Build RPM packages
        shell: bash
        run: |
          TARGET_DISTRO=${{ matrix.release.upload_dir }}

          for HEADERS in $(ls ${{ env.UNPACKED }}/usr/src/kernels/); do
            rpmbuild \
              -D "%kernel_path ${{ env.UNPACKED }}/usr/src/kernels/${HEADERS}/" \
              -D "_topdir /tmp/${TARGET_DISTRO}/${{ env.DRIVER_VER }}/rpmbuild" \
              -tb ${{ env.UNPACKED }}/${{ env.DRIVER_VER }}/${{ env.RPM_TAR }}
          done

          RPM_DIR=/tmp/${TARGET_DISTRO}/${{ env.DRIVER_VER }}/rpmbuild/RPMS/${{ matrix.release.arch }}
          echo "RPM_DIR=${RPM_DIR}/*" | tee -a $GITHUB_ENV
          echo "TARGET_DISTRO=${TARGET_DISTRO}" | tee -a $GITHUB_ENV


      - name: Prepare environment for upload
        shell: bash
        run: |
          DATE="$(date -u +%Y.%m.%d)"

          if [[ '${{ inputs.driver_upload_location }}' == 'tmp' || \
                '${{ inputs.driver_build_type }}' == 'tmp' ]]; then
            AZURE_PATH=tmp/nfp_drv_dkms_builds/${{ github.actor }}/${DATE}/rpm/${{ env.TARGET_DISTRO }}
          else
            if [[ "${{ inputs.customer }}" != "" ]]; then
              BASE_NAME="agilio-nfp-driver-${{ inputs.customer }}-"
            else
              BASE_NAME="agilio-nfp-driver-"
            fi
            RELEASE_VER_MAJOR=$(echo ${{ env.RPM_TAR }} | \
              sed "s/${BASE_NAME}\([0-9]\{2\}\.[0-9]\{2\}\).*/\1/" )
            AZURE_PATH=${{ env.BASE_DIR }}/${RELEASE_VER_MAJOR}/rpm/${{ env.TARGET_DISTRO }}
          fi
          echo "AZURE_PATH=${AZURE_PATH}" | tee -a $GITHUB_ENV

      - name: Upload RPM packages
        uses: Corigine/ci-libs/github_actions/azure/azcopy_upload_sync@main
        with:
          connection-string: ${{ secrets.AZ_SAS_TOK }}
          src: ${{ env.RPM_DIR }}
          dst: ${{ env.AZURE_PATH }}

      - name: Cleanup RPM build tree
        shell: bash
        run: |
          sudo rm -r /tmp/${{ env.TARGET_DISTRO }}/${{ env.DRIVER_VER }}/rpmbuild
