##  This file provides Linux kernel build rules, for executing within the
##  Kbuild environment.
##

## Define our own config variables.
## A kernel Kconfig file may define these variables one day.
CONFIG_NFP ?= m
# Include code for /dev/nfp* user space access
CONFIG_NFP_USER_SPACE_CPP ?= y
# Export NFP function symbols
CONFIG_NFP_EXPORTS ?= y
# Include code for the PFs
CONFIG_NFP_NET_PF ?= y
# Include code for the VFs
CONFIG_NFP_NET_VF ?= y
# Include code for the Hardware Doorbell
CONFIG_NFP_HARD_DB ?= y
# Include code for the RoCE
CONFIG_NFP_ROCE ?= y

CONFIG_INFINIBAND_CRDMA ?= m

# RoCE dependes on Hardware Doorbell
ifeq ($(CONFIG_NFP_ROCE),y)
  CONFIG_NFP_HARD_DB := y
endif

ifeq ($(CONFIG_INFINIBAND_CRDMA),m)
  CONFIG_NFP_HARD_DB := y
  CONFIG_NFP_ROCE ?= y
endif


ccflags-y := $(CFLAGS_EXTRA)

# un-comment for debug symbols
# ccflags-y += -g3

# Perform checks only if config was evaluated (some targets e.g. clean don't
# have CONFIG_* variables set).
ifdef CONFIG_LOCALVERSION
ifneq ($(CONFIG_PCI),y)
  $(error NFP: The PCI subsystem (CONFIG_PCI) must be enabled)
endif

# FIXME: This should be encoded in Kconfig
ifneq ($(CONFIG_NFP),n)
  ifneq ($(CONFIG_PCI_MSI),y)
    $(warning NFP: MSI interrupts (CONFIG_PCI_MSI) not be enabled, disabling NFP_NET drivers)
    CONFIG_NFP_NET_PF = n
    CONFIG_NFP_NET_VF = n
  endif
  ifeq (,$(filter y m,$(CONFIG_FW_LOADER)))
    $(warning NFP: The firmware loader (CONFIG_FW_LOADER) should be enabled)
  endif
endif
endif

ifeq ($(CONFIG_XFRM_OFFLOAD),y)
  CONFIG_NFP_NET_IPSEC ?= y
endif

ccflags-y += $(call cc-option, -Wenum-compare,)
ccflags-y += $(call cc-option, -Wmaybe-uninitialized,)
ccflags-y += -I$(src)

ifneq ($(W),)
      ccflags-y += $(call cc-option, -Wno-missing-include-dirs,)
endif

obj-$(CONFIG_NFP)	+= nfp.o

nfp-objs := \
	    nfpcore/nfp6000_pcie.o \
	    nfpcore/nfp_nsp.o \
	    nfpcore/nfp_cppcore.o \
	    nfpcore/nfp_cpplib.o \
	    nfpcore/nfp_dev.o \
	    nfpcore/nfp_em_manager.o \
	    nfpcore/nfp_hwinfo.o \
	    nfpcore/nfp_mip.o \
	    nfpcore/nfp_mutex.o \
	    nfpcore/nfp_nbi.o \
	    nfpcore/nfp_nffw.o \
	    nfpcore/nfp_nsp_cmds.o \
	    nfpcore/nfp_nsp_eth.o \
	    nfpcore/nfp_platform.o \
	    nfpcore/nfp_resource.o \
	    nfpcore/nfp_rtsym.o \
	    nfpcore/nfp_target.o \
	    nfpcore/nfp_nbi_mac_eth.o \
	    nfpcore/nfp_net_vnic.o \
	    nfp_net_debugdump.o \
	    nfp_plat.o \
	    nfp_main.o

nfp-$(CONFIG_DCB) += nic/dcb.o

# Select DebugFS if forced from command line or kconfig
ifeq ($(CONFIG_NFP_DEBUG),y)
ccflags-y += -DCONFIG_NFP_DEBUG

nfp-objs += \
		nfp_net_debugfs.o
endif

# Select RoCE if forced from command line or kconfig
ifeq ($(CONFIG_NFP_ROCE),y)
ccflags-y += -DCONFIG_NFP_ROCE

nfp-objs += \
		nfpcore/nfp_roce.o
endif

# Select HARD Doorbell if forced from command line or kconfig
ifeq ($(CONFIG_NFP_HARD_DB),y)
ccflags-y += -DCONFIG_NFP_HARD_DB
endif

# Ubuntu version may contain non-digit characters, like rc, in such case
# tell the compat code not to trust it.  This should only happen on unofficial,
# non-LTS kernels.
UTS_UBUNTU_RELEASE_ABI := \
	$(shell awk '/UTS_UBUNTU_RELEASE_ABI/ {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/utsrelease.h 2>/dev/null || echo 0)

UBUNTU_BAD_VERSION := \
	$(shell /bin/bash -c '[[ $(UTS_UBUNTU_RELEASE_ABI) -ge 0 && \
				 $(UTS_UBUNTU_RELEASE_ABI) =~ ^(0x[0-9a-fA-F]+|[0-9]+)$$ \
			      ]] 2>/dev/null || echo 1')

ifeq ($(UBUNTU_BAD_VERSION),1)
  ccflags-y += -DCOMPAT__UTS_UBUNTU_RELEASE_ABI_BAD
endif

RHEL_MAJOR := \
	$(shell awk '/RHEL_MAJOR/ {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/uapi/linux/version.h 2>/dev/null || echo 0)

RHEL_MINOR := \
	$(shell awk '/RHEL_MINOR/ {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/uapi/linux/version.h 2>/dev/null || echo 0)

RHEL_RELEASE := \
	$(shell awk '/RHEL_RELEASE / {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/uapi/linux/version.h 2>/dev/null || echo 0)

KYLIN_MAJOR := \
	$(shell awk '/KYLIN_MAJOR/ {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/uapi/linux/version.h 2>/dev/null || echo 0)

KYLIN_MINOR := \
	$(shell awk '/KYLIN_MINOR/ {print $$3; found=1} \
		     END {if (found != 1) print 0}' \
		$(srctree)/include/generated/uapi/linux/version.h 2>/dev/null || echo 0)

VER_IS_NON_RHEL := $(shell [ $(RHEL_MAJOR) -eq 0 ] && echo y)

# Check if it's RHEL kernel and not earlier than given version
#
# @param $1: major version
# @param $2: minor version
define rhel_ge
$(shell [ $(RHEL_MAJOR) -gt $1 -o \
\( $(RHEL_MAJOR) -eq $1 -a $(RHEL_MINOR) -ge $2 \) ] && echo y)
endef

# Check if it's KYLIN kernel and not earlier than given version
#
# @param $1: major version
# @param $2: minor version
define kylin_ge
$(shell [ $(KYLIN_MAJOR) -gt $1 -o \
\( $(KYLIN_MAJOR) -eq $1 -a $(KYLIN_MINOR) -ge $2 \) ] && echo y)
endef

# Check if the kernel version is not earlier than given version
#
# @param $1: major version
# @param $2: minor version
define kern_ge
$(shell [ $(VERSION) -gt $1 -o \
\( $(VERSION) -eq $1 -a $(PATCHLEVEL) -ge $2 \) ] && echo y)
endef

# Define a variable to indicate whether given file containes given string
#
# @param $1: file to search in
# @param $2: string to match
# @param $3: variable used in following makefile context
define add_compat_var
$3 := $(shell grep -q $2 $1 2>/dev/null && echo y)
endef

# Define a macro used by source code if given file containes given string
#
# @param $1: file to search in
# @param $2: string to match
# @param $3: macro used in source code
define add_compat_flag
ifeq ($(shell grep -q $2 $1 2>/dev/null && echo y), y)
  ccflags-y += -D$3
endif
endef

# Define a variable to indicate whether given file containes given string
# and define a macro used by source code if yes
#
# @param $1: file to search in
# @param $2: string to match
# @param $3: variable used in following makefile context
# @param $4: macro used in source code
define add_compat_var_flag
$3 := $(shell grep -q $2 $1 2>/dev/null && echo y)
ifeq ($$($3), y)
  ccflags-y += -D$4
endif
endef

ifeq ($(call kern_ge,4,9),y)
  nfp-objs += nfp_hwmon.o
else
  nfp-objs += nfp_hwmon_legacy.o
endif

# Standardize the EXTRAVERSION
#
# @param $1: the raw EXTRAVERSION
# @param $2: the standardized EXTRAVERSION
define standardize_extraversion
$2 := $(shell awk 'BEGIN {output=sprintf("%s.%s.%s","$1",0,0); print output}')
endef

# Parse the EXTRAVERSION of kernel
#
# @param $1: the standardized EXTRAVERSION
# @param $2: macro used in source code
define parse_extraversion
ccflags-y += -D$2_EXTRACT_X=$(shell echo $1 | cut -d '.' -f 1)
ccflags-y += -D$2_EXTRACT_Y=$(shell echo $1 | cut -d '.' -f 2)
ccflags-y += -D$2_EXTRACT_Z=$(shell echo $1 | cut -d '.' -f 3)
endef

# Parse the EXTRAVERSION for RedHat
$(eval $(call standardize_extraversion,"$(RHEL_RELEASE)",RHEL_RELEASE_STANDARDIZED))
$(eval $(call parse_extraversion,$(RHEL_RELEASE_STANDARDIZED),RHEL_RELEASE))

# Check for eth_hw_addr_set
$(eval $(call add_compat_flag,$(srctree)/include/linux/etherdevice.h,eth_hw_addr_set,COMPAT__HAVE_ETH_HW_ADDR_SET))

# Check for ipv6_dst_lookup_flow - in two different locations as some
# distros have backported this at different times
$(eval $(call add_compat_flag,$(srctree)/include/net/ipv6_stubs.h,ipv6_dst_lookup_flow,COMPAT__HAVE_IP6_DST_FLOW_LOOKUP))
$(eval $(call add_compat_flag,$(srctree)/include/net/addrconf.h,ipv6_dst_lookup_flow,COMPAT__HAVE_IP6_DST_FLOW_LOOKUP))

# Check for rate_pkt_ps
$(eval $(call add_compat_flag,$(srctree)/include/net/flow_offload.h,rate_pkt_ps,COMPAT__HAVE_RATE_PKT_PS))

ifeq ($(CONFIG_NFP_USER_SPACE_CPP),y)
  ccflags-y += -DCONFIG_NFP_USER_SPACE_CPP

  nfp-objs += nfp_dev_cpp.o
endif
ifeq ($(CONFIG_NFP_EXPORTS),y)
  nfp-objs += nfpcore/nfp_export.o
endif

# Check for DIM
$(eval $(call add_compat_flag,$(srctree)/include/linux/dim.h,net_dim_get_rx,COMPAT_HAVE_DIM))

# Check for netif_set_real_num_queues
$(eval $(call add_compat_flag,$(srctree)/include/linux/netdevice.h,netif_set_real_num_queues,COMPAT__HAVE_NETIF_SET_REAL_NUM_QUEUES))

# Check for flow_offload
$(eval $(call add_compat_flag,$(srctree)/include/net/flow_offload.h,_NET_FLOW_OFFLOAD_H,COMPAT__HAVE_FLOW_OFFLOAD))

# Check for bpf_mac_inc type
$(eval $(call add_compat_flag,$(srctree)/include/linux/bpf.h,"^void bpf_map_inc(struct bpf_map \*map);",COMPAT__VOID_BPF_MAP_INC))

# Check for ethtool_coalesce
$(eval $(call add_compat_flag,$(srctree)/include/linux/ethtool.h, "struct kernel_ethtool_coalesce \*",COMPAT__ETHTOOL_COALESCE))

# Check for ethtool_ringparam
$(eval $(call add_compat_flag,$(srctree)/include/linux/ethtool.h, "struct kernel_ethtool_ringparam \*",COMPAT__ETHTOOL_RINGPARAM))

# Check for devlink_compat_phys_port_name_get
$(eval $(call add_compat_flag,$(srctree)/include/net/devlink.h,devlink_compat_phys_port_name_get,COMPAT__HAVE_DEVLINK_PHYS_PORT_NAME))

# Check for __netdev_tx_sent_queue
$(eval $(call add_compat_flag,$(srctree)/include/linux/netdevice.h,"__netdev_tx_sent_queue",COMPAT__NETDEV_TX_SENT_QUEUE))

# Check for flow_action_offload
$(eval $(call add_compat_flag,$(srctree)/include/net/flow_offload.h,"struct flow_rule",COMPAT_FLOW_ACTION_OFFLOAD))

# Check for bpf_prog_prepare
$(eval $(call add_compat_flag,$(srctree)/include/linux/bpf.h,"int (\*prepare)(struct bpf_prog \*prog);",COMPAT__BPF_PROG_PREPARE))

utsrelease_h_path :=$(srctree)/include/generated/utsrelease.h
# Check for BC Linux
$(eval $(call add_compat_flag,$(utsrelease_h_path),bclinux,COMPAT_BCLINUX=1))
$(eval $(call add_compat_flag,$(utsrelease_h_path),4.19.0-240.23.11.el8_2.bclinux.x86_64,COMPAT_BC82_KERN_11=1))
# Check for openEuler Linux
$(eval $(call add_compat_flag,$(utsrelease_h_path),oe,COMPAT_OELINUX=1))
# Check for KYLIN Linux
$(eval $(call add_compat_var_flag,$(utsrelease_h_path),ky,COMPAT_KYLINUX,COMPAT_KYLINUX=1))
$(eval $(call add_compat_var_flag,$(utsrelease_h_path),v2101.ky10,COMPAT_KYLINUX_V10SP2,COMPAT_KYLINUX_V10SP2))
# Check for Anolis Linux
$(eval $(call add_compat_var_flag,$(utsrelease_h_path),an8,COMPAT_ANOLISLINUX,COMPAT_ANOLISLINUX=1))
$(eval $(call add_compat_var,$(utsrelease_h_path),an7,COMPAT_ANOLISLINUX_MAJOR_7))
# Check for SUSE linux
ifneq (, $(wildcard $(srctree)/include/generated/uapi/linux/suse_version.h))
  ccflags-y += -DCOMPAT_SLELINUX=1
  local_version="$(shell echo $(CONFIG_LOCALVERSION) | cut -f 2 -d "-").0"
  ccflags-y += -DSLEL_LOCALVER_X=$(shell echo $(local_version) | cut -d '.' -f 1)
  ccflags-y += -DSLEL_LOCALVER_Y=$(shell echo $(local_version) | cut -d '.' -f 2)
  COMPAT_SUSE := y
endif

VER_IS_NON_RHEL_OR_KYL := \
	$(shell [ $(RHEL_MAJOR) -eq 0 ] && [ -z $(COMPAT_KYLINUX) ] && echo y)

ifneq (,$(filter y,$(CONFIG_NFP_NET_PF) $(CONFIG_NFP_NET_VF)))
  ccflags-y += -DCONFIG_NFP_DEBUG

  nfp-objs += \
		nfd3/dp.o \
		nfd3/rings.o \
		nfdk/dp.o \
		nfdk/rings.o \
		nfp_app.o \
		ccm_mbox.o \
		nfp_net_ctrl.o \
		nfp_net_common.o \
		nfp_net_compat.o \
		nfp_net_dp.o \
		nfp_net_ethtool.o \
		nfp_net_debugfs.o \
		nfp_net_sriov.o \
		nfp_port.o

  ifeq ($(call kern_ge,5,3)$(CONFIG_TLS_DEVICE),yy)
    ccflags-y += -DCOMPAT__HAVE_TLS_OFFLOAD=1

    nfp-objs += \
		crypto/tls.o
  endif

  ifeq ($(CONFIG_NFP_NET_PF),y)
    ccflags-y += -DCONFIG_NFP_NET_PF=1

    nfp-objs += \
		nfp_app_nic.o \
		nfp_ctrl.o \
		nfp_net_main.o \
		nic/main.o

    ifneq (,$(filter y,$(call kern_ge,4,6) $(call rhel_ge,7,4)))
      nfp-objs += \
	       nfp_devlink.o
    endif

    ifneq (,$(filter y,$(call kern_ge,5,10) $(call rhel_ge,8,5)))
      ccflags-y += -DCOMPAT__HAVE_XDP_SOCK_DRV=1

      nfp-objs += \
	       nfd3/xsk.o \
	       nfp_net_xsk.o
    endif

    $(eval $(call add_compat_var,$(srctree)/include/uapi/linux/devlink.h,DEVLINK_PARAM_FW_LOAD_POLICY_VALUE_UNKNOWN,COMPAT__DEVLINK_PARAM))
    ifeq ($(COMPAT__DEVLINK_PARAM),y)
      nfp-objs += \
	       devlink_param.o
    endif

    ifneq (,$(filter y,$(call kern_ge,4,7) $(call rhel_ge,7,4)))
      nfp-objs += \
		nfp_shared_buf.o
    endif

    ifeq ($(call kern_ge,4,13),y)
      nfp-objs += \
		ccm.o
    endif

    ifeq ($(call kern_ge,4,18),y)
      ifeq ($(CONFIG_BPF_SYSCALL),y)
        nfp-objs += \
		nfp_asm.o \
		bpf/cmsg.o \
		bpf/main.o \
		bpf/offload.o \
		bpf/verifier.o \
		bpf/jit.o
      endif
    endif

    $(eval $(call add_compat_flag,$(srctree)/include/linux/netdevice.h,register_netdevice_notifier_rh,COMPAT__HAVE_REGISTER_NETDEVICE_NOTIFIER_RH))
    $(eval $(call add_compat_var,$(srctree)/include/net/dst_metadata.h,METADATA_IP_TUNNEL,COMPAT__HAVE_METADATA_IP_TUNNEL))

    ifeq ($(COMPAT__HAVE_METADATA_IP_TUNNEL), y)
      ifneq (,$(filter y,$(VER_IS_NON_RHEL_OR_KYL) $(call rhel_ge,8,0)))
	ccflags-y += -DCOMPAT__HAVE_METADATA_IP_TUNNEL=1
	nfp-objs += \
		nfp_net_repr.o

	ifeq ($(CONFIG_NET_SWITCHDEV),y)
	  ccflags-y += -DCOMPAT__HAVE_NFP_APP_FLOWER
	  nfp-objs += \
		flower/action.o \
		flower/cmsg.o \
		flower/lag_conf.o \
		flower/match.o \
		flower/metadata.o \
		flower/offload.o \
		flower/main.o \
		flower/tunnel_conf.o \
		flower/sgw/nfp_config.o \
		flower/sgw/main.o

          ifneq (,$(filter y,$(call kern_ge,5,2) $(call rhel_ge,8,2)))
	    nfp-objs += \
		flower/qos_conf.o
	  endif

          ifneq (,$(filter y,$(call kern_ge,5,9) $(call rhel_ge,8,3)))
	    nfp-objs += \
		flower/conntrack.o
	  endif

	else ifdef CONFIG_LOCALVERSION # don't warn on clean
          $(warning NFP: CONFIG_NET_SWITCHDEV not enabled in the kernel, disabling apps: flower)
	endif

	ifeq ($(call kern_ge,5,0),y)
	  ccflags-y += -DCOMPAT__HAVE_NFP_APP_ABM_NIC
	  nfp-objs += \
		abm/cls.o \
		abm/ctrl.o \
		abm/main.o \
		abm/qdisc.o
	endif
      else
        $(warning NFP: RHEL kernel or KYLIN kernel detected, disabling apps: flower)
        $(warning Please contact Corigine Support if the flower app is required.)
      endif
    endif
  endif

  ifeq ($(CONFIG_NFP_NET_VF),y)
    ccflags-y += -DCONFIG_NFP_NET_VF=1

    nfp-objs += nfp_netvf_main.o
  endif

  $(eval $(call add_compat_var,$(srctree)/include/linux/xarray.h,XA_LIMIT,COMPAT_HAVE_XARRAY))
  ifeq ($(CONFIG_NFP_NET_IPSEC)$(COMPAT_HAVE_XARRAY),yy)
    nfp-objs += crypto/ipsec.o nfd3/ipsec.o nfdk/ipsec.o
    ccflags-y += -DCONFIG_NFP_NET_IPSEC
  endif
endif # CONFIG_NFP_NET_*

# Use check_crdma_sup.sh to determine if CRDMA is supported
BUILD_CRDMA := $(shell /bin/bash -c '$(src)/../tools/check_crdma_sup.sh \
                                     $(KERNELRELEASE) $(srctree) 2>/dev/null')

# Use nested if as 'AND' statement:
#   if BUILD_CRDMA != y and BUILD_CRDMA != 0
# then something went wrong during detection, use the safer option of disabling
# BUILD_CRDMA
ifneq ($(BUILD_CRDMA),0)
    ifneq ($(BUILD_CRDMA),y)
        $(warning Could not determine if CRDMA should be compiled, disabling)
        BUILD_CRDMA := 0
    endif
endif

ifeq ($(BUILD_CRDMA),y)
	obj-$(CONFIG_INFINIBAND_CRDMA)  += crdma.o

	crdma-y := \
		   crdma/crdma_hw.o \
		   crdma/crdma_main.o \
		   crdma/crdma_ucif.o \
		   crdma/crdma_util.o \
		   crdma/crdma_verbs.o \
		   crdma/crdma_bond.o
endif

####################
# Build information
####################

# Determine the NFP driver's source directory.
nfp_src_dir := $(dir $(realpath $(src)/nfp_main.c))
ifeq ($(nfp_src_dir),)
nfp_src_dir := $(dir $(shell readlink $(src)/nfp_main.c))
endif
ifeq ($(nfp_src_dir),)
nfp_src_dir := .
endif

# Work out driver version if build from repository
NFPVER := $(shell git -C $(nfp_src_dir) rev-parse --short HEAD 2> /dev/null)
ifeq ($(NFPVER),)
  # Some DKMS packages may want the .revision to be inside source dir
  ifneq (,$(wildcard $(src)/.revision))
    NFPVER := rev-$(shell cat $(src)/.revision)
  endif
  # Use ../.revision by default for backward compatibility
  ifneq (,$(wildcard $(src)/../.revision))
    NFPVER := rev-$(shell cat $(src)/../.revision)
  endif
endif
ifeq ($(NFPVER),)
  NFPVER := no-src-ver
endif

clean-files := $(obj)/nfp_build_info.h
$(obj)/nfp_build_info.h: FORCE
	@echo "/* Automatically generated file */" > $@
	@echo "#define NFP_SRC_VERSION \"$(NFPVER) (o-o-t)\"" >> $@
	@echo "#define NFP_BUILD_USER_ID \"$(shell id -u -n)\"" >> $@
	@echo "#define NFP_BUILD_USER \"$(shell getent passwd `id -u -n` | cut -d ':' -f 5 | cut -d ',' -f 1 | tr -cd '[:print:]\n')\"" >> $@
	@echo "#define NFP_BUILD_HOST \"$(shell hostname)\"" >> $@
	@echo "#define NFP_BUILD_PATH \"$(obj)\"" >> $@
	@echo "#define NFP_SRC_PATH \"$(nfp_src_dir)\"" >> $@

$(obj)/nfp_main.o: $(obj)/nfp_build_info.h
